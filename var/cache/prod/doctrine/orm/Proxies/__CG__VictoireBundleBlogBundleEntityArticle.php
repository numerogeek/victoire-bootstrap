<?php

namespace Proxies\__CG__\Victoire\Bundle\BlogBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Article extends \Victoire\Bundle\BlogBundle\Entity\Article implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'id', 'status', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'category', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'publishedAt', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'author', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'tags', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'blog', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'template', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'categoryTitle', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'publishedAtString', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'authorAvatar', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'authorFullName', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'deletedAt', 'locale', 'proxy', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'visibleOnFront', 'createdAt', 'updatedAt', 'translations', 'newTranslations', 'currentLocale', 'defaultLocale'];
        }

        return ['__isInitialized__', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'id', 'status', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'category', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'publishedAt', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'author', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'tags', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'blog', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'template', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'categoryTitle', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'publishedAtString', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'authorAvatar', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'authorFullName', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'deletedAt', 'locale', 'proxy', '' . "\0" . 'Victoire\\Bundle\\BlogBundle\\Entity\\Article' . "\0" . 'visibleOnFront', 'createdAt', 'updatedAt', 'translations', 'newTranslations', 'currentLocale', 'defaultLocale'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Article $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\Victoire\Bundle\BlogBundle\Entity\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishedAt', []);

        return parent::getPublishedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublishedAt($publishedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublishedAt', [$publishedAt]);

        return parent::setPublishedAt($publishedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDeletedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDeletedAt', []);

        return parent::getDeletedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setDeletedAt($deletedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDeletedAt', [$deletedAt]);

        return parent::setDeletedAt($deletedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlog()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlog', []);

        return parent::getBlog();
    }

    /**
     * {@inheritDoc}
     */
    public function setBlog(\Victoire\Bundle\BlogBundle\Entity\Blog $blog)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBlog', [$blog]);

        return parent::setBlog($blog);
    }

    /**
     * {@inheritDoc}
     */
    public function setTags($tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', [$tags]);

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function addTag($tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTag', [$tag]);

        return parent::addTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTag($tag)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTag', [$tag]);

        return parent::removeTag($tag);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function getBusinessEntity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBusinessEntity', []);

        return parent::getBusinessEntity();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplate(\Victoire\Bundle\BlogBundle\Entity\ArticleTemplate $template)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplate', [$template]);

        return parent::setTemplate($template);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplate', []);

        return parent::getTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategoryTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategoryTitle', []);

        return parent::getCategoryTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getPublishedAtString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublishedAtString', []);

        return parent::getPublishedAtString();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorAvatar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorAvatar', []);

        return parent::getAuthorAvatar();
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthorFullname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthorFullname', []);

        return parent::getAuthorFullname();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name, $locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name, $locale]);

        return parent::setName($name, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug, $locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug, $locale]);

        return parent::setSlug($slug, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description, $locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description, $locale]);

        return parent::setDescription($description, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image, $locale = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image, $locale]);

        return parent::setImage($image, $locale);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxy(\Victoire\Bundle\CoreBundle\Entity\EntityProxy $proxy = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProxy', [$proxy]);

        return parent::setProxy($proxy);
    }

    /**
     * {@inheritDoc}
     */
    public function getProxy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProxy', []);

        return parent::getProxy();
    }

    /**
     * {@inheritDoc}
     */
    public function isVisibleOnFront()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVisibleOnFront', []);

        return parent::isVisibleOnFront();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisibleOnFront($visibleOnFront)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisibleOnFront', [$visibleOnFront]);

        return parent::setVisibleOnFront($visibleOnFront);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntityAttributeValue($field)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntityAttributeValue', [$field]);

        return parent::getEntityAttributeValue($field);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function getNewTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewTranslations', []);

        return parent::getNewTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation($translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$translation]);

        return parent::addTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation($translation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$translation]);

        return parent::removeTranslation($translation);
    }

    /**
     * {@inheritDoc}
     */
    public function translate($locale = NULL, $fallbackToDefault = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'translate', [$locale, $fallbackToDefault]);

        return parent::translate($locale, $fallbackToDefault);
    }

    /**
     * {@inheritDoc}
     */
    public function mergeNewTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'mergeNewTranslations', []);

        return parent::mergeNewTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentLocale', [$locale]);

        return parent::setCurrentLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentLocale', []);

        return parent::getCurrentLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultLocale', [$locale]);

        return parent::setDefaultLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultLocale', []);

        return parent::getDefaultLocale();
    }

}
