<?php

namespace Proxies\__CG__\Victoire\Bundle\WidgetMapBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class WidgetMap extends \Victoire\Bundle\WidgetMapBundle\Entity\WidgetMap implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'action', 'view', 'contextualView', 'widgets', 'replaced', 'substitutes', 'asynchronous', 'parent', 'position', 'children', 'slot'];
        }

        return ['__isInitialized__', 'id', 'action', 'view', 'contextualView', 'widgets', 'replaced', 'substitutes', 'asynchronous', 'parent', 'position', 'children', 'slot'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (WidgetMap $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function isAsynchronous()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAsynchronous', []);

        return parent::isAsynchronous();
    }

    /**
     * {@inheritDoc}
     */
    public function setAsynchronous($asynchronous)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAsynchronous', [$asynchronous]);

        return parent::setAsynchronous($asynchronous);
    }

    /**
     * {@inheritDoc}
     */
    public function setAction($action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAction', [$action]);

        return parent::setAction($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAction', []);

        return parent::getAction();
    }

    /**
     * {@inheritDoc}
     */
    public function getWidgets()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWidgets', []);

        return parent::getWidgets();
    }

    /**
     * {@inheritDoc}
     */
    public function addWidget(\Victoire\Bundle\WidgetBundle\Entity\Widget $widget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWidget', [$widget]);

        return parent::addWidget($widget);
    }

    /**
     * {@inheritDoc}
     */
    public function setWidgets($widgets)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWidgets', [$widgets]);

        return parent::setWidgets($widgets);
    }

    /**
     * {@inheritDoc}
     */
    public function getView()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getView', []);

        return parent::getView();
    }

    /**
     * {@inheritDoc}
     */
    public function setView(\Victoire\Bundle\CoreBundle\Entity\View $view)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setView', [$view]);

        return parent::setView($view);
    }

    /**
     * {@inheritDoc}
     */
    public function getContextualView()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContextualView', []);

        return parent::getContextualView();
    }

    /**
     * {@inheritDoc}
     */
    public function setContextualView(\Victoire\Bundle\CoreBundle\Entity\View $contextualView)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContextualView', [$contextualView]);

        return parent::setContextualView($contextualView);
    }

    /**
     * {@inheritDoc}
     */
    public function getReplaced()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReplaced', []);

        return parent::getReplaced();
    }

    /**
     * {@inheritDoc}
     */
    public function setReplaced($replaced)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReplaced', [$replaced]);

        return parent::setReplaced($replaced);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlot', []);

        return parent::getSlot();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlot($slot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlot', [$slot]);

        return parent::setSlot($slot);
    }

    /**
     * {@inheritDoc}
     */
    public function getChild($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChild', [$position]);

        return parent::getChild($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getContextualChildren($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContextualChildren', [$position]);

        return parent::getContextualChildren($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getChildren()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChildren', []);

        return parent::getChildren();
    }

    /**
     * {@inheritDoc}
     */
    public function setChildren($children)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChildren', [$children]);

        return parent::setChildren($children);
    }

    /**
     * {@inheritDoc}
     */
    public function addChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', [$child]);

        return parent::addChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function removeChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChild', [$child]);

        return parent::removeChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(\Victoire\Bundle\WidgetMapBundle\Entity\WidgetMap $parent = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', []);

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', [$position]);

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getContextualSubstitutes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContextualSubstitutes', []);

        return parent::getContextualSubstitutes();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubstituteForView(\Victoire\Bundle\CoreBundle\Entity\View $view)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubstituteForView', [$view]);

        return parent::getSubstituteForView($view);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllSubstitutes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllSubstitutes', []);

        return parent::getAllSubstitutes();
    }

    /**
     * {@inheritDoc}
     */
    public function addSubstitute(\Victoire\Bundle\WidgetMapBundle\Entity\WidgetMap $substitute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubstitute', [$substitute]);

        return parent::addSubstitute($substitute);
    }

    /**
     * {@inheritDoc}
     */
    public function setSubstitutes($substitutes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubstitutes', [$substitutes]);

        return parent::setSubstitutes($substitutes);
    }

}
