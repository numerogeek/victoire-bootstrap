<?php

namespace Proxies\__CG__\Victoire\Bundle\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Link extends \Victoire\Bundle\CoreBundle\Entity\Link implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'url', 'locale', 'target', 'modalLayout', 'viewReference', 'attachedWidget', 'route', 'routeParameters', 'linkType', 'analyticsTrackCode', 'referers', 'parameters', 'viewReferencePage', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'id', 'url', 'locale', 'target', 'modalLayout', 'viewReference', 'attachedWidget', 'route', 'routeParameters', 'linkType', 'analyticsTrackCode', 'referers', 'parameters', 'viewReferencePage', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Link $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getParameters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParameters', []);

        return parent::getParameters();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setTarget($target)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTarget', [$target]);

        return parent::setTarget($target);
    }

    /**
     * {@inheritDoc}
     */
    public function getTarget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTarget', []);

        return parent::getTarget();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute($route)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute', [$route]);

        return parent::setRoute($route);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute', []);

        return parent::getRoute();
    }

    /**
     * {@inheritDoc}
     */
    public function setRouteParameters($routeParameters)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRouteParameters', [$routeParameters]);

        return parent::setRouteParameters($routeParameters);
    }

    /**
     * {@inheritDoc}
     */
    public function getRouteParameters()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRouteParameters', []);

        return parent::getRouteParameters();
    }

    /**
     * {@inheritDoc}
     */
    public function getViewReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViewReference', []);

        return parent::getViewReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setViewReference($viewReference)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViewReference', [$viewReference]);

        return parent::setViewReference($viewReference);
    }

    /**
     * {@inheritDoc}
     */
    public function setLinkType($linkType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLinkType', [$linkType]);

        return parent::setLinkType($linkType);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinkType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinkType', []);

        return parent::getLinkType();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttachedWidget()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttachedWidget', []);

        return parent::getAttachedWidget();
    }

    /**
     * {@inheritDoc}
     */
    public function setAttachedWidget($attachedWidget)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttachedWidget', [$attachedWidget]);

        return parent::setAttachedWidget($attachedWidget);
    }

    /**
     * {@inheritDoc}
     */
    public function checkLink(\Symfony\Component\Validator\Context\ExecutionContextInterface $context)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkLink', [$context]);

        return parent::checkLink($context);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnalyticsTrackCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnalyticsTrackCode', []);

        return parent::getAnalyticsTrackCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setAnalyticsTrackCode($analyticsTrackCode)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAnalyticsTrackCode', [$analyticsTrackCode]);

        return parent::setAnalyticsTrackCode($analyticsTrackCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getViewReferencePage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViewReferencePage', []);

        return parent::getViewReferencePage();
    }

    /**
     * {@inheritDoc}
     */
    public function setViewReferencePage($viewReferencePage)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViewReferencePage', [$viewReferencePage]);

        return parent::setViewReferencePage($viewReferencePage);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

    /**
     * {@inheritDoc}
     */
    public function getModalLayout()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModalLayout', []);

        return parent::getModalLayout();
    }

    /**
     * {@inheritDoc}
     */
    public function setModalLayout($modalLayout)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModalLayout', [$modalLayout]);

        return parent::setModalLayout($modalLayout);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

}
